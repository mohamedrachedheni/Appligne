import jwt  # Importation de la biblioth√®que JWT pour la cr√©ation et la gestion des tokens
from datetime import datetime, timedelta, timezone  # Importation des modules n√©cessaires pour g√©rer le temps
from django.conf import settings  # Importation des param√®tres de configuration de Django
import logging
import requests

# Configuration du logger avec le nom du module actuel
logger = logging.getLogger(__name__)

def generate_jwt_token(user_id):
    """
    G√©n√®re un token JWT pour un utilisateur donn√©.
    
    Args:
    - user_id (int/str) : L'identifiant de l'utilisateur pour lequel le token est g√©n√©r√©.
    
    Returns:
    - str : Le token JWT encod√©.
    """
    
    # Cr√©ation du payload du token avec l'identifiant de l'utilisateur et la date d'expiration
    payload = {
        'user_id': user_id,  # L'identifiant de l'utilisateur
        'exp': datetime.now(timezone.utc) + timedelta(seconds=settings.JWT_EXP_DELTA_SECONDS)  # La date d'expiration du token
    }
    
    # Encodage du token JWT en utilisant la cl√© secr√®te et l'algorithme sp√©cifi√©s dans les param√®tres de configuration
    token = jwt.encode(payload, settings.JWT_SECRET, settings.JWT_ALGORITHM)
    
    # Retourne le token JWT encod√©
    return token


from cryptography.fernet import Fernet
from django.conf import settings

# Cl√© Fernet
fernet = Fernet(settings.SECRET_ENCRYPTION_KEY.encode())

def encrypt_id(value):
    """Chiffre un ID et retourne la cha√Æne s√©curis√©e."""
    return fernet.encrypt(str(value).encode()).decode()

def decrypt_id(encrypted_value):
    """D√©chiffre un ID s√©curis√© et retourne sa valeur d'origine."""
    try:
        return int(fernet.decrypt(encrypted_value.encode()).decode())
    except Exception:
        return None


def verify_recaptcha(captcha_response, client_ip=None):
    """
    V√©rification am√©lior√©e de reCAPTCHA v3 avec gestion des erreurs.

    Args:
        captcha_response (str): Jeton reCAPTCHA envoy√© par le client (souvent depuis un formulaire).
        client_ip (str, optional): Adresse IP du client, utile pour la journalisation et parfois exig√©e par Google.

    Returns:
        tuple: 
            - success (bool): True si la v√©rification a r√©ussi, False sinon.
            - score (float): Score reCAPTCHA retourn√© par l‚ÄôAPI (entre 0.0 et 1.0).
    """

    # V√©rifie si le jeton reCAPTCHA est pr√©sent
    if not captcha_response:
        logger.warning(f"Aucune r√©ponse CAPTCHA re√ßue - IP: {client_ip or 'inconnue'}")
        return False, 0.0

    try:
        # Pr√©paration des donn√©es √† envoyer √† l‚ÄôAPI reCAPTCHA de Google
        data = {
            'secret': settings.RECAPTCHA_PRIVATE_KEY,  # Cl√© priv√©e fournie par Google
            'response': captcha_response               # Jeton reCAPTCHA envoy√© par le client
        }

        # Ajout de l‚Äôadresse IP du client (optionnel mais recommand√© par Google)
        if client_ip:
            data['remoteip'] = client_ip

        # Envoi de la requ√™te POST vers l‚ÄôAPI de v√©rification de Google
        response = requests.post(
            'https://www.google.com/recaptcha/api/siteverify',
            data=data,
            timeout=5   # Timeout de s√©curit√© ( 5 secondes que votre application attendra la r√©ponse 
                        #de Google apr√®s avoir envoy√© la requ√™te POST √† l‚ÄôAPI de v√©rification reCAPTCHA.) 
                        # pour √©viter les appels bloquants
        )

        # Conversion de la r√©ponse JSON en dictionnaire Python
        result = response.json()

        # Extraction des r√©sultats : succ√®s et score du reCAPTCHA
        success = result.get('success', False)
        score = result.get('score', 0.0)

        # Journalisation compl√®te pour audit et d√©bogage
        logger.debug(
            f"CAPTCHA verify - IP: {client_ip or 'inconnue'} | "
            f"Hostname: {result.get('hostname', 'inconnu')} | "      # Domaine valid√© (utile contre les abus)
            f"Score: {score:.2f} | "                                 # Score entre 0.0 (bot) et 1.0 (humain)
            f"Action: {result.get('action', 'inconnue')} | "         # Action pr√©cis√©e lors de l'ex√©cution du reCAPTCHA
            f"Timestamp: {result.get('challenge_ts', 'N/A')} | "     # Timestamp de l‚Äô√©v√©nement
            f"Success: {success}"                                    # Succ√®s ou non
        )

        # Si √©chec, journalise les erreurs retourn√©es par l‚ÄôAPI (ex: cl√© invalide, r√©ponse expir√©e, etc.)
        if not success:
            error_codes = result.get('error-codes', [])
            logger.warning(
                f"√âchec CAPTCHA - IP: {client_ip or 'inconnue'} | "
                f"Erreurs: {', '.join(error_codes) or 'aucune'}"
            )

        # Retourne les r√©sultats de la v√©rification
        return success, score

    # Gestion des erreurs de connexion r√©seau (API inaccessible, d√©lai d√©pass√©, etc.)
    except requests.exceptions.RequestException as e:
        logger.error(
            f"Erreur r√©seau CAPTCHA - IP: {client_ip or 'inconnue'} | "
            f"Erreur: {str(e)}"
        )
        return False, 0.0

    # Gestion d‚Äôerreurs impr√©vues pour √©viter les crashs silencieux
    except Exception as e:
        logger.error(
            f"Erreur inattendue CAPTCHA - IP: {client_ip or 'inconnue'} | "
            f"Erreur: {str(e)}"
        )
        return False, 0.0


def get_client_ip(request):
    """
    R√©cup√®re l'adresse IP r√©elle du client, m√™me s'il passe par un ou plusieurs proxies.

    La logique suivante est appliqu√©e :
    - Si la requ√™te provient d‚Äôun proxy de confiance (ex: un reverse proxy NGINX local),
      on extrait l‚ÄôIP client depuis le header `X-Forwarded-For`.
    - Sinon, on se contente de l‚ÄôIP vue directement par Django (`REMOTE_ADDR`).

    Cela permet de limiter les risques d'usurpation d'IP via un faux header X-Forwarded-For.
    """

    # ‚úÖ R√©cup√®re la valeur brute du header HTTP_X_FORWARDED_FOR s‚Äôil est pr√©sent
    # Ce header peut contenir plusieurs IP s√©par√©es par des virgules, dans l‚Äôordre :
    # IP client, IP proxy1, IP proxy2, ..., IP du proxy final
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')

    # ‚úÖ R√©cup√®re l‚Äôadresse IP directement visible par le serveur (souvent celle du dernier proxy ou du client)
    remote_addr = request.META.get('REMOTE_ADDR')

    # ‚úÖ D√©clare les adresses IP des reverse proxies consid√©r√©s comme fiables (√† adapter selon votre config)
    # Exemples courants : localhost (127.0.0.1) ou ::1 (IPv6 localhost)
    trusted_proxies = ['127.0.0.1', '::1']

    # üîç Log des valeurs initiales pour analyse en cas de probl√®me
    logger.debug(f"REMOTE_ADDR d√©tect√©e : {remote_addr}")
    logger.debug(f"X-Forwarded-For brut : {x_forwarded_for}")

    if x_forwarded_for:
        # ‚úÖ Nettoie et s√©pare les diff√©rentes IPs dans le header X-Forwarded-For
        ip_list = [ip.strip() for ip in x_forwarded_for.split(',')]
        logger.debug(f"Liste des IPs extraites du X-Forwarded-For : {ip_list}")

        # ‚úÖ V√©rifie si la requ√™te a √©t√© re√ßue via un proxy de confiance
        if remote_addr in trusted_proxies:
            # üü¢ On fait confiance au header et on prend la premi√®re IP (celle du client r√©el)
            client_ip = ip_list[0]
            logger.debug(f"Client IP d√©termin√©e depuis X-Forwarded-For : {client_ip}")
            return client_ip
        else:
            # üî¥ Requ√™te venant d‚Äôun proxy non approuv√© : on ignore X-Forwarded-For pour √©viter les spoofing
            logger.warning(f"REMOTE_ADDR non reconnu comme proxy de confiance : {remote_addr} ‚Äî refus de faire confiance √† X-Forwarded-For")

    # ‚úÖ Cas par d√©faut : on retourne l'adresse IP directe vue par Django
    logger.debug(f"Client IP d√©termin√©e depuis REMOTE_ADDR : {remote_addr}")
    return remote_addr


import logging
from django.conf import settings
from django.contrib import messages
from django.http import JsonResponse
from django.shortcuts import render


logger = logging.getLogger(__name__)

def check_captcha_verification(request, captcha_response, user_ip, user_agent, context_data, is_ajax):
    """
    V√©rifie le CAPTCHA et retourne une r√©ponse Http en cas d'√©chec.
    
    Args :
        request: HttpRequest courant
        captcha_response (str): Jeton reCAPTCHA v3 envoy√© par le frontend
        user_ip (str): Adresse IP du client
        user_agent (str): Navigateur ou agent utilisateur
        context_data (dict): Donn√©es de contexte pour le template
        is_ajax (bool): Indique si la requ√™te est AJAX

    Returns :
        None si succ√®s, sinon HttpResponse (erreur ou message)
    """
    captcha_valid, captcha_score = verify_recaptcha(captcha_response, client_ip=user_ip)

    # CAPTCHA invalide
    if not captcha_valid:
        error_msg = "Validation CAPTCHA √©chou√©e. Veuillez r√©essayer."
        logger.warning(f"CAPTCHA invalide - IP: {user_ip} - Agent: {user_agent} - Score: {captcha_score}")
        if is_ajax:
            return JsonResponse({'error': error_msg}, status=400)
        messages.error(request, error_msg)
        return render(request, 'pages/seconnecter.html', context_data)

    # CAPTCHA valide mais score trop faible
    if captcha_score < getattr(settings, 'RECAPTCHA_MIN_SCORE', 0.5):
        error_msg = "Activit√© suspecte d√©tect√©e. Veuillez r√©essayer."
        logger.warning(f"Score CAPTCHA trop bas - IP: {user_ip} - Agent: {user_agent} - Score: {captcha_score}")
        if is_ajax:
            return JsonResponse({'error': error_msg}, status=400)
        messages.error(request, error_msg)
        return render(request, 'pages/seconnecter.html', context_data)

    return None  # Succ√®s

def handle_recaptcha_validation(captcha_response, user_ip, user_agent, request=None, context_data=None, is_ajax=False):
    """
    Appelle check_captcha_verification et retourne une r√©ponse HTTP si erreur,
    sinon retourne None si tout est ok.
    """
    result = check_captcha_verification(
        request=request,
        captcha_response=captcha_response,
        user_ip=user_ip,
        user_agent=user_agent,
        context_data=context_data or {},
        is_ajax=is_ajax
    )
    return result  # soit None, soit JsonResponse ou render()
