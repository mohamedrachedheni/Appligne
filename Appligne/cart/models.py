# cart>models.py
from django.db import models
from django.conf import settings
from django.core.files import File
from django.utils import timezone
from django.template.loader import render_to_string
from io import BytesIO
import uuid
import os
from decimal import Decimal
from xhtml2pdf import pisa
from accounts.models import Cours, Payment


# ========================
#   Mod√®le Panier (Cart)
# ========================
class Cart(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    payment = models.OneToOneField(Payment, on_delete=models.SET_NULL, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"Panier de {self.user.username}"

    @property
    def total(self):
        return sum(item.subtotal for item in self.items.all())


# ========================
#   √âl√©ment du panier
# ========================
class CartItem(models.Model):
    cart = models.ForeignKey(Cart, related_name='items', on_delete=models.CASCADE)
    cours = models.CharField(max_length=255, null=True, blank=True)  # Description texte du cours
    quantity = models.IntegerField(default=1)  # Nombre d'unit√©s (jours)
    price = models.IntegerField()  # Prix unitaire en centimes (ex: 1250 = 12,50 ‚Ç¨)


    @property
    def subtotal(self):
        return self.quantity * self.price  # En centimes



# ========================
#   Facture
# ========================
"""
Voici une explication compl√®te du mod√®le Invoice (facture) 
dans Django. Ce mod√®le permet de g√©n√©rer, stocker et suivre 
les factures li√©es aux paniers et aux paiements (notamment via Stripe).
"""
import uuid
from io import BytesIO
from django.core.files import File
from django.template.loader import render_to_string
from xhtml2pdf import pisa
from django.conf import settings
from django.db import models
from django.utils import timezone

class Invoice(models.Model):
    STATUS_CHOICES = [
        ('draft', 'Brouillon'),
        ('paid', 'Pay√©e'),
        ('canceled', 'Annul√©e'),
    ]

    cart = models.OneToOneField('Cart', on_delete=models.SET_NULL, null=True)
    payment = models.OneToOneField(Payment, on_delete=models.SET_NULL, null=True)
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)

    invoice_number = models.CharField(max_length=20, unique=True)  # G√©n√©r√© automatiquement
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='draft')
    stripe_id = models.CharField(max_length=255, blank=True) # cr√©er avec view; create_checkout_session
    total = models.IntegerField()  # Calcul√© automatiquement depuis le panier en centimes
    pdf = models.FileField(upload_to='invoices/', blank=True)  # G√©n√©r√© automatiquement
    created_at = models.DateTimeField(auto_now_add=True)
    paid_at = models.DateTimeField(null=True, blank=True)

    def __str__(self):
        return f"Facture {self.invoice_number}"

    def generate_invoice_number(self):
        """
        G√©n√®re un num√©ro de facture unique au format : INV-YYYYMMDD-XXXXXX
        """
        date_part = timezone.now().strftime('%Y%m%d')
        unique_part = uuid.uuid4().hex[:6].upper()
        return f"INV-{date_part}-{unique_part}"

    def generate_pdf(self):
        """
        G√©n√®re un PDF √† partir du template 'invoice/pdf_template.html' et le stocke dans le champ `pdf`.
        Utilise xhtml2pdf pour la conversion HTML ‚Üí PDF en m√©moire (BytesIO).
        """
        from eleves.models import Eleve, Parent  # Adapter selon l'emplacement r√©el des mod√®les

        parent = None
        try:
            eleve = Eleve.objects.get(user=self.user)
            parent = Parent.objects.filter(user=self.user).first()  # Li√© au m√™me user que l'√©l√®ve
        except Eleve.DoesNotExist:
            pass

        html = render_to_string('invoice/pdf_template.html', {
            'invoice': self,
            'parent': parent
        })

        result = BytesIO()
        pdf_status = pisa.CreatePDF(src=html, dest=result)

        if not pdf_status.err:
            filename = f"invoice_{self.invoice_number}.pdf"
            self.pdf.save(filename, File(result), save=False)


    def save(self, *args, **kwargs):
        # G√©n√©rer le num√©ro si n√©cessaire
        if not self.invoice_number:
            self.invoice_number = self.generate_invoice_number()

        # Calculer le total si non d√©fini
        if (self.total is None or self.total == 0) and self.cart:
            self.total = Decimal(self.cart.total) / Decimal('100') # Conversion centimes ‚Üí euros

        # Sauvegarde initiale pour g√©n√©rer invoice_number
        super().save(*args, **kwargs)

        # Si le PDF est manquant, le g√©n√©rer
        if not self.pdf:
            try:
                self.generate_pdf()
                if self.pdf:  # V√©rification que le fichier a bien √©t√© cr√©√©
                    super().save(update_fields=['pdf'])  # Sauvegarde uniquement du champ PDF
            except Exception as e:
                import traceback
                print("Erreur lors de la g√©n√©ration du PDF :", e)
                print(traceback.format_exc())
                # Optionnel : logger ou envoyer une alerte ici

"""
üõë Risques ou am√©liorations possibles :
    1. üîÑ Boucle de sauvegarde infinie (√† √©viter) :
    Si generate_pdf() modifiait d'autres champs et d√©clenchait √† son tour un nouveau save(), cela pourrait cr√©er une boucle r√©cursive. Ici ce n‚Äôest pas le cas, car :

    le PDF est g√©n√©r√© en m√©moire et sauvegard√© sans appel √† save() dans generate_pdf(),

    le deuxi√®me save() reste simple et direct.

    2. ‚úÖ Am√©lioration de performance possible :
    Tu pourrais optimiser le code pour √©viter un 2e save() si le PDF est d√©j√† g√©n√©r√© en m√©moire (mais ce n'est pas indispensable si le mod√®le est bien con√ßu).
"""